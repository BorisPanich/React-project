{"version":3,"sources":["components/Profile/ProfileInfo/ProfileDataForm.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/SocialLink/SocialLink.module.css","components/Profile/ProfileInfo/Analitics/Analitics.module.css","components/Profile/ProfileStatus/ProfileStatus.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/SocialLink/SocialLink.tsx","components/Profile/ProfileInfo/Analitics/Analitics.tsx","components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","SocialLink","className","social","wrapper","list","item","link","img","src","Analytics","analytics","container","title","text","ProfileStatusWithHooks","props","useState","status","setStatus","editMode","setEditMode","useEffect","style","box","onDoubleClick","onChange","event","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","error","onSubmit","s","createField","Input","type","Textarea","contacts","Object","keys","map","key","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","profileInfo","contactTitle","contactValue","Contact","contactsBox","ProfileInfo","savePhoto","saveProfile","Loader","content__wrapper","content__img","alt","info","ava__img","photos","small","ava","name","editPhoto","uploadInput","target","files","length","initialValues","formData","console","log","then","Post","posts","wrap","image","message","like__btn","like","likeCount","maxLength10","maxLengthCreator","MyPosts","React","memo","postElements","postsData","post","id","AddPostFormRedux","values","addNewPost","newPostContent","Field","component","placeholder","validate","requiredField","add__btn","MyPostsContainer","connect","state","profilePage","dispatch","addNewPostActionCreator","Profile","ProfileContainer","userID","this","match","params","authorizedUserID","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.70e1ad0d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"ProfileDataForm_box__s7lrX\",\"error\":\"ProfileDataForm_error__3t56O\",\"contactsBox\":\"ProfileDataForm_contactsBox__3MSlF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__img\":\"ProfileInfo_content__img__aWXvy\",\"ava__img\":\"ProfileInfo_ava__img__1sQx7\",\"content__wrapper\":\"ProfileInfo_content__wrapper__2gTAm\",\"name\":\"ProfileInfo_name__1qIRn\",\"info\":\"ProfileInfo_info__fZvyd\",\"social\":\"ProfileInfo_social__e7nuA\",\"status\":\"ProfileInfo_status__2eype\",\"box\":\"ProfileInfo_box__1QgAN\",\"contacts\":\"ProfileInfo_contacts__3L6pf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"SocialLink_list__3O1cW\",\"img\":\"SocialLink_img__2Z9Jr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Analitics_wrapper__1B3_Q\",\"container\":\"Analitics_container__29NpE\",\"title\":\"Analitics_title__ppOZh\",\"text\":\"Analitics_text__35dyr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"ProfileStatus_box__w8n5u\",\"status\":\"ProfileStatus_status__NrTLQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"MyPosts_wrap__3ZM4A\",\"add__btn\":\"MyPosts_add__btn__iAUP0\",\"title\":\"MyPosts_title__1U0lt\",\"post\":\"MyPosts_post__1ITUW\",\"ava\":\"MyPosts_ava__Imwzp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Post_wrap__2paOF\",\"img\":\"Post_img__2IStc\",\"text\":\"Post_text__rixVh\",\"like__btn\":\"Post_like__btn__3xVpJ\",\"like\":\"Post_like__2JdFf\"};","import React from 'react';\nimport social from './SocialLink.module.css';\n\nconst SocialLink = () => {\n  return (\n    <div className={social.wrapper}>\n      <ul className={social.list}>\n        <li className={social.item}>\n          <a className={social.link}>\n            <img className={social.img} src='https://iqonic.design/themes/socialv/html/images/icon/08.png'/>\n          </a>\n        </li>\n        <li className={social.item}>\n          <a className={social.link}>\n            <img className={social.img} src='https://iqonic.design/themes/socialv/html/images/icon/10.png'/>\n          </a>\n        </li>\n        <li className={social.item}>\n          <a className={social.link}>\n            <img className={social.img} src='https://iqonic.design/themes/socialv/html/images/icon/13.png'/>\n          </a>\n        </li>\n        <li className={social.item}>\n          <a className={social.link}>\n            <img className={social.img} src='https://iqonic.design/themes/socialv/html/images/icon/12.png'/>\n          </a>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default SocialLink;","import React from 'react';\nimport analytics from './Analitics.module.css';\n\nconst Analytics = () => {\n  return (\n    <div className={analytics.wrapper}>\n      <div className={analytics.container}>\n        <p className={analytics.title}>Posts</p>\n        <p className={analytics.text}>690</p>\n      </div>\n      <div className={analytics.container}>\n        <p className={analytics.title}>Followers</p>\n        <p className={analytics.text}>206</p>\n      </div>\n      <div className={analytics.container}>\n        <p className={analytics.title}>Following</p>\n        <p className={analytics.text}>100</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Analytics;","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport style from './ProfileStatus.module.css';\n\n\ntype ProfileStatusWithHooksPropsType = {\n\tstatus: string\n\tupdateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks = (props: ProfileStatusWithHooksPropsType) => {\n\tconst [status, setStatus] = useState<string>(props.status)\n\tconst [editMode, setEditMode] = useState<boolean>(false)\n\n\tuseEffect(() => {\n\t\tsetStatus(props.status)\n\t}, [props.status])\n\n\tconst activateEditMode = () => {\n\t\tsetEditMode(true)\n\t}\n\n\tconst deactivateEditMode = () => {\n\t\tsetEditMode(false)\n\t\tprops.updateStatus(status)\n\t}\n\n\tconst onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tsetStatus(event.currentTarget.value)\n\t}\n\n\treturn (\n\t\t<div className={style.box}>\n\t\t\t{!editMode &&\n      <div>\n        <p className={style.status} onDoubleClick={activateEditMode}>{props.status || 'No status'}</p>\n      </div>\n\t\t\t}\n\n\t\t\t{editMode &&\n      <div>\n        <input onChange={onStatusChange} autoFocus value={status} onBlur={deactivateEditMode}/>\n      </div>\n\t\t\t}\n\t\t</div>\n\t)\n}","import React, {FC} from 'react';\nimport {createField, GetStringKeys, Input, Textarea} from '../../common/FormControls/FormControls';\nimport {InjectedFormProps, reduxForm} from 'redux-form';\nimport {ProfileType} from '../../../types/types';\nimport s from './ProfileDataForm.module.css'\n\ntype PropsType = {\n\tprofile: ProfileType\n}\n\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\n\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({profile, handleSubmit, error}) => {\n\n\treturn (\n\t\t<form onSubmit={handleSubmit} className={s.box}>\n\t\t\t<div>\n\t\t\t\t<button>save</button>\n\t\t\t</div>\n\t\t\t{error && <div className={s.error}>{error}</div>}\n\t\t\t<div>\n\t\t\t\t<b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<b>Looking for a job</b>: { createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t<b>My professional skills</b>:\n\t\t\t\t{ createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t<b>About me</b>:\n\t\t\t\t{ createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea  )}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div className={s.contacts}><b>Contacts:</b></div>\n\t\t\t\t{Object.keys(profile.contacts).map(key => {\n\t\t\t\treturn <div key={key} >\n\t\t\t\t\t<b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\n\t\t\t\t</div>\n\t\t\t})}\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;\n","import React, {ChangeEvent, FC, useState} from 'react';\nimport profileInfo from './ProfileInfo.module.css';\nimport SocialLink from './SocialLink/SocialLink';\nimport Analytics from './Analitics/Analitics';\nimport Loader from '../../common/Loader/Loader';\nimport ava from './../../../assets/image/usersPage/default_user.png';\nimport {ProfileStatusWithHooks} from '../ProfileStatus/ProfileStatusWithHooks';\nimport ProfileDataForm from './ProfileDataForm';\nimport {ContactsType, ProfileType} from '../../../types/types';\nimport s from './ProfileDataForm.module.css';\n\n\ntype ProfileInfoType = {\n\tprofile: ProfileType\n\tstatus: string\n\tupdateStatus: (status: string) => void\n\tisOwner: boolean\n\tsavePhoto: (photo: File) => void\n\tsaveProfile: (profile: ProfileType) => Promise<any>\n}\n\n\nconst ProfileInfo = ({isOwner, profile, savePhoto, status, updateStatus, saveProfile}: ProfileInfoType) => {\n\tconst [editMode, setEditMode] = useState(false);\n\n\tif (!profile) {\n\t\treturn <Loader/>\n\t}\n\n\tconst onMainPhotoSelected = (event: ChangeEvent<HTMLInputElement>) => {\n\n\t\tif (event.target.files && event.target.files.length) {\n\t\t\tsavePhoto(event.target.files[0])\n\t\t}\n\t}\n\tconst onSubmit = (formData: ProfileType) => {\n\t\tconsole.log(formData)\n\t\tsaveProfile(formData).then(\n\t\t\t() => {\n\t\t\t\tsetEditMode(false);\n\t\t\t}\n\t\t);\n\t}\n\n\treturn (\n\t\t<div className={profileInfo.content__wrapper}>\n\t\t\t<img className={profileInfo.content__img}\n\t\t\t\t\t src='https://iqonic.design/themes/socialv/html/images/page-img/profile-bg1.jpg' alt=\"bg\"/>\n\t\t\t<div className={profileInfo.info}>\n\t\t\t\t<img className={profileInfo.ava__img} src={profile.photos.small || ava}/>\n\t\t\t\t<ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n\t\t\t\t<p className={profileInfo.name}>{profile.fullName}</p>\n\t\t\t\t<p className={profileInfo.status}>{profile.lookingForAJobDescription}</p>\n\t\t\t\t<div className={profileInfo.editPhoto}>\n\t\t\t\t\t{isOwner &&\n          <>\n            <input type='file' className={profileInfo.uploadInput} onChange={onMainPhotoSelected}/>\n          </>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className={profileInfo.editMode}>\n\t\t\t\t{editMode\n\t\t\t\t\t? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n\t\t\t\t\t: <ProfileData goToEditMode={() => {\n\t\t\t\t\t\tsetEditMode(true)\n\t\t\t\t\t}} profile={profile} isOwner={isOwner}/>}\n\t\t\t</div>\n\t\t\t<div className={profileInfo.social}>\n\t\t\t\t<SocialLink/>\n\t\t\t\t<Analytics/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\ntype ProfileDataPropsType = {\n\tprofile: ProfileType\n\tisOwner: boolean\n\tgoToEditMode?: () => void\n}\n\nconst ProfileData: FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n\treturn (\n\t\t<>\n\t\t\t<div>\n\t\t\t\t{isOwner && <div>\n          <button onClick={goToEditMode}>edit</button>\n        </div>}\n\t\t\t\t<div>\n\t\t\t\t\t<b>Full name</b>: {profile.fullName}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<b>Looking for a job</b>: {profile.lookingForAJob ? 'Yes' : 'No'}\n\t\t\t\t</div>\n\t\t\t\t{profile.lookingForAJob &&\n        <div><b>My professional skills</b>: {profile.lookingForAJobDescription}</div>}\n\t\t\t\t<div>\n\t\t\t\t\t<b>About me</b>: {profile.aboutMe}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<div className={profileInfo.contacts}><b>Contacts:</b></div> {\n\t\t\t\t\tObject\n\t\t\t\t\t\t.keys(profile.contacts)\n\t\t\t\t\t\t.map((key) => {\n\t\t\t\t\t\t\treturn <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\n\t\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\ntype ContactsPropsType = {\n\tcontactTitle: string\n\tcontactValue: string\n}\n\nconst Contact: FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n\treturn (\n\t\t<div className={s.contactsBox}>\n\t\t\t<span><b>{contactTitle}</b></span>\n\t\t\t<span><b>{contactValue}</b></span>\n\t\t</div>\n\t)\n}\n\n\nexport default ProfileInfo;","import React from 'react';\nimport posts from './Post.module.css';\n\ntype MessageType = {\n  message: string\n  likeCount: number\n  image: string\n}\n\nconst Post = (props: MessageType) => {\n  return (\n    <div className={posts.wrap}>\n      <img className={posts.img} src={props.image} />\n      <div className={posts.text}>{props.message}</div>\n      <button className={posts.like__btn}>&#10084;</button>\n      <p className={posts.like}>{props.likeCount}</p>\n    </div>\n  )\n}\n\nexport default Post;","import React from 'react';\nimport posts from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport { Field, InjectedFormProps } from 'redux-form';\nimport { reduxForm } from 'redux-form';\nimport { MyPostsType } from '../../../redux/profilepage-reducer';\nimport { maxLengthCreator, requiredField } from '../../../utils/validators/validators';\nimport { Textarea } from '../../common/FormControls/FormControls';\n\ntype MyPostsPropsType = {\n\tpostsData: Array<MyPostsType>\n\taddNewPost: (newPostContent: string) => void\n}\n\nconst maxLength10 = maxLengthCreator(100)\n\n// shouldComponentUpdate(nextProps: Readonly<MyPostsPropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\n// \treturn nextProps !== this.props || nextState !== this.state\n// }\n\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\n\n\n\tconst postsData = props.postsData\n\n\tconst postElements = postsData.map(post => <Post message={post.message}\n\t\tlikeCount={post.likeCount}\n\t\tkey={post.id}\n\t\timage={post.image} />)\n\n\tconst addNewPost = (values: any) => {\n\t\tprops.addNewPost(values.newPostContent)\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<div className={posts.post}>\n\t\t\t\t<p className={posts.title}>Create Post</p>\n\t\t\t\t<AddPostFormRedux onSubmit={addNewPost} />\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t{postElements}\n\t\t\t</div>\n\t\t</div>\n\t)\n})\n\ntype FormDataType = {\n\tnewPostContent: string\n}\n\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n\treturn (\n\t\t<form className={posts.wrap} onSubmit={props.handleSubmit}>\n\t\t\t<img className={posts.ava} src='https://iqonic.design/themes/socialv/html/images/user/1.jpg' />\n\t\t\t<Field component={Textarea} name='newPostContent' placeholder=\"Write something here...\"\n\t\t\t\tvalidate={[requiredField, maxLength10]}\n\t\t\t/>\n\t\t\t<button className={posts.add__btn} >Add post</button>\n\t\t</form>\n\t)\n}\n\nconst AddPostFormRedux = reduxForm<FormDataType>({\n\tform: 'newPostContent'\n})(AddMessageForm)\n\nexport default MyPosts;","import React from 'react';\nimport {addNewPostActionCreator} from '../../../redux/profilepage-reducer';\nimport MyPosts from './MyPosts';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../../redux/redux-store';\n\n\nconst mapStateToProps = (state: AppStateType) => {\n\treturn {\n\t\tpostsData: state.profilePage.postsData,\n\t}\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n\treturn {\n\t\taddNewPost: (newPostContent: string) => {\n\t\t\tdispatch(addNewPostActionCreator(newPostContent))\n\t\t}\n\t}\n}\n\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;","import React from 'react';\nimport profile from './Profile.module.css';\nimport ProfileInfo  from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport {ProfileType} from '../../types/types';\n\n\nexport type ProfilePropsType = {\n  profile: ProfileType\n  status: string\n  updateStatus: (status: string) => void\n  isOwner: boolean\n  savePhoto: (photo: File) => void\n  saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile = (props: ProfilePropsType) => {\n  return (\n    <div className={profile.profile}>\n      <ProfileInfo saveProfile={props.saveProfile} profile={props.profile} updateStatus={props.updateStatus} status={props.status} isOwner={props.isOwner} savePhoto={props.savePhoto}/>\n      <MyPostsContainer  />\n    </div>\n  )\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport {connect} from 'react-redux';\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from '../../redux/profilepage-reducer';\nimport {withAuthRedirect} from '../../hoc/AuthRedirect';\nimport {AppStateType} from '../../redux/redux-store';\nimport {compose} from 'redux';\n\ntype PathParamsType = {\n\tuserID: string\n}\n\ntype CommonComponentPropsType = RouteComponentProps<PathParamsType> & PropsType\n\n\ntype mapStateToPropsType = {\n\t// profile:  null\n\t// status: string\n\t// authorizedUserID: string\n\t// isAuth: boolean\n}\n\ntype mapDispatchToPropsType = {\n\tsetUserProfile: (profile: any) => void\n}\n\n\ntype PropsType = mapStateToPropsType & mapDispatchToPropsType\n\nclass ProfileContainer extends React.Component<any, CommonComponentPropsType> {\n\n\trefreshProfile() {\n\t\t// console.log(this.props.authorizedUserID)\n\t\tlet userID = this.props.match.params.userID\n\t\t// userID = 12438\n\t\tif (!userID) {\n\t\t\tuserID = this.props.authorizedUserID\n\t\t\tif (!userID) {\n\t\t\t\tthis.props.history.push('/login')\n\t\t\t}\n\t\t}\n\n\t\tthis.props.getUserProfile(userID);\n\t\tthis.props.getStatus(userID)\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.refreshProfile()\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<CommonComponentPropsType>, snapshot?: any) {\n\t\tif (this.props.match.params.userID !== prevProps.match.params.userID) {\n\t\t\tthis.refreshProfile()\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Profile  {...this.props} profile={this.props.profile}\n\t\t\t\t\t\t\t\tisOwner={!this.props.match.params.userID}\n\t\t\t\t\t\t\t\tstatus={this.props.status} updateStatus={this.props.updateStatus}\n\t\t\t\t\t\t\t\tsavePhoto={this.props.savePhoto}\n\t\t\t\t\t\t\t\tsaveProfile={this.props.saveProfile}\n\t\t\t/>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n\tconsole.log('mapStateToProps render from ProfileContainer')\n\treturn ({\n\t\tprofile: state.profilePage.profile,\n\t\tstatus: state.profilePage.status,\n\t\tauthorizedUserID: state.auth.userID,\n\t\tisAuth: state.auth.isAuth,\n\t})\n}\n\n\nexport default compose(\n\tconnect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n\twithRouter,\n\twithAuthRedirect\n)(ProfileContainer) as React.FunctionComponent<any>\n\n//тоже самое что и запись через константы:\n// const AuthRedirectComponent = withAuthRedirect(ProfileContainer);\n// const WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\n// export default connect(mapStateToProps, {getUserProfile,  getStatus, updateStatus})(WithUrlDataContainerComponent);"],"sourceRoot":""}